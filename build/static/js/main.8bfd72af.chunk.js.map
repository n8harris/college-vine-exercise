{"version":3,"sources":["CounterButton.js","RecapButton.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["CounterButton","props","react_default","a","createElement","onClick","incrementCounter","className","dropShadowStyleActive","style","background","backgroundColor","RecapButton","recapColors","Counter","counterVal","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","COLORS","green","blue","white","state","colorHistory","currentColorIndex","runningRecap","bind","assertThisInitialized","setState","checkCounterVal","_isDivByFiveRemThree","setColorState","_isPrime","_isNotZeroDivByTen","color","concat","_this2","recapInterval","setInterval","length","clearInterval","val","Array","from","v","k","filter","src_CounterButton_0","src_Counter_0","src_RecapButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bfd72af.chunk.js","sourcesContent":["import React from 'react';\nimport './CounterButton.css';\n\nconst CounterButton = props => (\n  <button\n    onClick={props.incrementCounter}\n    className={props.dropShadowStyleActive ? 'CounterButtonDrop' : 'CounterButton'}\n    style={{background: props.backgroundColor}}>\n      Click me\n  </button>\n);\n\nexport default CounterButton;\n","import React from 'react';\n\nconst RecapButton = props => (\n  <button\n    onClick={props.recapColors}\n  >\n    Recap colors\n  </button>\n);\n\nexport default RecapButton;","import React from 'react';\nimport './Counter.css';\n\nconst Counter = props => (\n  <span className='Counter'>{props.counterVal}</span>\n);\n\nexport default Counter;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\nimport RecapButton from './RecapButton';\nimport Counter from './Counter';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.COLORS = {\n      green: 'green',\n      blue: 'blue',\n      white: 'white',\n    }\n    this.state = {\n      counterVal: 0,\n      backgroundColor: this.COLORS.white,\n      dropShadowStyleActive: false,\n      colorHistory: [],\n      currentColorIndex: 0,\n      runningRecap: false,\n    };\n    this.incrementCounter = this.incrementCounter.bind(this);\n    this.recapColors = this.recapColors.bind(this);\n  }\n\n  incrementCounter() {\n    if (this.state.counterVal < 100) {\n      this.setState({ counterVal: this.state.counterVal + 1 }, this.checkCounterVal);\n    }\n  }\n\n  checkCounterVal() {\n    // Precedence is order in which specifications were given\n    if (this._isDivByFiveRemThree(this.state.counterVal)) {\n      this.setColorState(this.COLORS.green);\n      return;\n    }\n\n    if (this._isPrime(this.state.counterVal)) {\n      this.setColorState(this.COLORS.blue);\n      return;\n    }\n\n    if(this._isNotZeroDivByTen(this.state.counterVal)) {\n      this.setState({ backgroundColor: this.COLORS.white, dropShadowStyleActive: true });\n      return;\n    }\n\n    this.setState({ backgroundColor: this.COLORS.white, dropShadowStyleActive: false });\n  }\n\n  setColorState(color) {\n    this.setState({\n      backgroundColor: color,\n      colorHistory: this.state.colorHistory.concat([color]),\n      dropShadowStyleActive: false,\n    });\n  }\n\n  recapColors() {\n    if (!this.state.runningRecap) {\n      this.setState({ runningRecap: true });\n      const recapInterval = setInterval(() => {\n        if (this.state.currentColorIndex < this.state.colorHistory.length) {\n          this.setState({\n            backgroundColor: this.state.colorHistory[this.state.currentColorIndex],\n            currentColorIndex: this.state.currentColorIndex + 1\n          });\n        } else {\n          clearInterval(recapInterval);\n          this.setState({ runningRecap: false, currentColorIndex: 0 });\n        }\n      }, 500);\n    }\n  }\n\n  _isDivByFiveRemThree(val) {\n    return val % 5 === 3;\n  }\n\n  _isPrime(val) {\n    // A functional approach to isPrime\n    return val > 1 && Array.from({length: val - 2}, (v, k) => k + 2).filter((v) => val % v === 0).length === 0;\n  }\n\n  _isNotZeroDivByTen(val) {\n    return val !== 0 && val % 10 === 0;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CounterButton\n          incrementCounter={this.incrementCounter}\n          dropShadowStyleActive={this.state.dropShadowStyleActive}\n          backgroundColor={this.state.backgroundColor}\n        />\n        <Counter counterVal={this.state.counterVal} />\n        <RecapButton\n          recapColors={this.recapColors}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}